{"title":"Methods of Selection from Genetic Algorithm","date":"2020-07-03T15:06:12.000Z","date_formatted":{"ll":"Jul 3, 2020","L":"07/03/2020","MM-DD":"07-03"},"link":"2020/07/03/Methods-of-Selection-from-Genetic-Algorithm","comments":true,"tags":["RL"],"updated":"2020-07-03T15:06:12.000Z","content":"<p>Here are some methods of selection from genetic algorithm. I think it works in reinforcement learning, especially in exploitation. It gives me lots of inspiration.</p>\n<!--block-->\n<h2 id=\"1-tournament-selection\">1 Tournament Selection<a title=\"#1-tournament-selection\" href=\"#1-tournament-selection\"></a></h2>\n<p>pseudo code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choose k (the tournament size) individuals from the population at random</span><br><span class=\"line\">choose the best individual from the tournament with probability p</span><br><span class=\"line\">choose the second best individual with probability p*(1-p)</span><br><span class=\"line\">choose the third best individual with probability p*((1-p)^2)</span><br><span class=\"line\">and so on</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-roulette-selection\">2 Roulette Selection<a title=\"#2-roulette-selection\" href=\"#2-roulette-selection\"></a></h2>\n<p>Pseudo code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calculate S = the sum of a finesses.</span><br><span class=\"line\">Generate a random number between 0 and S.</span><br><span class=\"line\">Starting from the top of the population, keep adding the finesses to the partial sum P, till P&lt;S.</span><br><span class=\"line\">The individual for which P exceeds S is the chosen individual.</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.tutorialspoint.com/genetic_algorithms/images/sus.jpg\" alt=\"SUS\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"3-elitism-selection\">3 Elitism Selection<a title=\"#3-elitism-selection\" href=\"#3-elitism-selection\"></a></h2>\n<p>Sometimes good candidates can be lost when cross-over or mutation results in offspring that are weaker than the parents. Often the EA will re-discover these lost improvements in a subsequent generation but there is no guarantee. To combat this we can use a feature known as <em>elitism</em>. Elitism involves copying a small proportion of the fittest candidates, unchanged, into the next generation. This can sometimes have a dramatic impact on performance by ensuring that the EA does not waste time re-discovering previously discarded partial solutions. Candidate solutions that are preserved unchanged through elitism remain eligible for selection as parents when breeding the remainder of the next generation.</p>\n<h3 id=\"tip\"><em>Tip</em><a title=\"#tip\" href=\"#tip\"></a></h3>\n<p>The Watchmaker Framework supports elitism via the second parameter to the <code>evolve</code> method of an <code>EvolutionEngine</code>. This elite count is the number of candidates in a generation that should be copied unchanged from the previous generation, rather than created via evolution. Collectively these candidates are the <em>elite</em>. So for a population size of 100, setting the elite count to 5 will result in the fittest 5% of each generation being copied, without modification, into the next generation.</p>\n<h2 id=\"4-steady-state-selection\">4 Steady State Selection<a title=\"#4-steady-state-selection\" href=\"#4-steady-state-selection\"></a></h2>\n<p>Pseudo code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P &lt;- generate a population of individuals randomly</span><br><span class=\"line\">while stopping criterion has not been met:</span><br><span class=\"line\">\tparent1 &lt;- tournament_selection(P)</span><br><span class=\"line\">\tparent2 &lt;- tournament_selection(P)</span><br><span class=\"line\">\tchild1, child2 &lt;- with probability cross_rate crossover parent1, parent2</span><br><span class=\"line\">\tchild1 &lt;- mutate child1</span><br><span class=\"line\">\tchild2 &lt;- mutate child2</span><br><span class=\"line\">\tbest1, best2 &lt;- get the two highest fitness individuals out of parent1, parent2, child1, child2</span><br><span class=\"line\">\treplace parent1 with best1</span><br><span class=\"line\">\treplace parent2 with best2</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-rank-selection\">5 Rank Selection<a title=\"#5-rank-selection\" href=\"#5-rank-selection\"></a></h2>\n<p><em>Rank Selection</em> is similar to fitness-proportionate selection except that selection probability is proportional to relative fitness rather than absolute fitness. In other words, it doesn’t make any difference whether the fittest candidate is ten times fitter than the next fittest or 0.001% fitter. In both cases the selection probabilities would be the same; all that matters is the ranking relative to other individuals.</p>\n<p>Rank selection will tend to avoid premature convergence by tempering selection pressure for large fitness differentials that occur in early generations. Conversely, by amplifying small fitness differences in later generations, selection pressure is increased compared to alternative selection strategies.</p>\n<h2 id=\"6-stochastic-universal-sampling\">6 Stochastic Universal Sampling<a title=\"#6-stochastic-universal-sampling\" href=\"#6-stochastic-universal-sampling\"></a></h2>\n<p><em>Stochastic Universal Sampling</em> is an elaborately-named variation of roulette wheel selection. Stochastic Universal Sampling ensures that the observed selection frequencies of each individual are in line with the expected frequencies. So if we have an individual that occupies 4.5% of the wheel and we select 100 individuals, we would expect on average for that individual to be selected between four and five times. Stochastic Universal Sampling guarantees this. The individual will be selected either four times or five times, not three times, not zero times and not 100 times. Standard roulette wheel selection does not make this guarantee.</p>\n<p>Stochastic Universal Sampling works by making a single spin of the roulette wheel. This provides a starting position and the first selected individual. The selection process then proceeds by advancing all the way around the wheel in equal sized steps, where the step size is determined by the number of individuals to be selected. So if we are selecting 30 individuals we will advance by 1/30 x 360 degrees for each selection. Note that this does not mean that every candidate on the wheel will be selected. Some weak individuals will have very thin slices of the wheel and these might be stepped over completely depending on the random starting position.</p>\n<h2 id=\"7-reward-based-selection\">7 Reward-based Selection<a title=\"#7-reward-based-selection\" href=\"#7-reward-based-selection\"></a></h2>\n<p><strong>Reward-based selection</strong> is a technique used in evolutionary algorithms for selecting potentially useful solutions for recombination. The probability of being selected for an individual is proportional to the cumulative reward, obtained by the individual. The cumulative reward can be computed as a sum of the individual reward and the reward, inherited from parents.</p>\n<h2 id=\"8-truncation-selection\">8 Truncation Selection<a title=\"#8-truncation-selection\" href=\"#8-truncation-selection\"></a></h2>\n<p>Truncation selection is the simplest and arguably least useful selection strategy. Truncation selection simply retains the fittest <code>x</code>% of the population. These fittest individuals are duplicated so that the population size is maintained. For example, we might select the fittest 25% from a population of 100 individuals. In this case we would create four copies of each of the 25 candidates in order to maintain a population of 100 individuals. This is an easy selection strategy to implement but it can result in premature convergence as less fit candidates are ruthlessly culled without being given the opportunity to evolve into something better. Nevertheless, truncation selection can be an effective strategy for certain problems.</p>\n<h2 id=\"9-sigma-scaling-selection\">9 Sigma Scaling Selection<a title=\"#9-sigma-scaling-selection\" href=\"#9-sigma-scaling-selection\"></a></h2>\n<p>Like rank selection, <em>Sigma Scaling</em> attempts to moderate selection pressure over time so that it is not too strong in early generations and not too weak once the population has stabilised  and fitness differences are smaller. The Greek letter Sigma is used in statistics to denote standard deviation and that’s what it means here too. The standard deviation of the population fitness is used to scale the fitness scores so that selection pressure is relatively constant over the lifetime of the evolutionary program.</p>\n<h2 id=\"10-fitness-proportionate-selection\">10 Fitness-Proportionate Selection<a title=\"#10-fitness-proportionate-selection\" href=\"#10-fitness-proportionate-selection\"></a></h2>\n<p>A better approach to selection is to give every individual a chance of being selected to breed but to make fitter candidates more likely to be chosen than weaker individuals. This is achieved by making an individual’s survival probability a function of its fitness score. Such strategies are known as <em>fitness-proportionate selection</em>.</p>\n","prev":{"title":"Methods of Search from Genetic Algorithm","link":"2020/07/03/Methods-of-Search-from-Genetic-Algorithm"},"next":{"title":"Play list Generator in Python","link":"2020/07/03/Play-list-Generator-in-Python"},"plink":"http://thswind.github.io/2020/07/03/Methods-of-Selection-from-Genetic-Algorithm/","toc":[{"id":"1-tournament-selection","title":"1 Tournament Selection","index":"1"},{"id":"2-roulette-selection","title":"2 Roulette Selection","index":"2"},{"id":"3-elitism-selection","title":"3 Elitism Selection","index":"3","children":[{"id":"tip","title":"Tip","index":"3.1"}]},{"id":"4-steady-state-selection","title":"4 Steady State Selection","index":"4"},{"id":"5-rank-selection","title":"5 Rank Selection","index":"5"},{"id":"6-stochastic-universal-sampling","title":"6 Stochastic Universal Sampling","index":"6"},{"id":"7-reward-based-selection","title":"7 Reward-based Selection","index":"7"},{"id":"8-truncation-selection","title":"8 Truncation Selection","index":"8"},{"id":"9-sigma-scaling-selection","title":"9 Sigma Scaling Selection","index":"9"},{"id":"10-fitness-proportionate-selection","title":"10 Fitness-Proportionate Selection","index":"10"}],"reward":true,"copyright":{"author":"THSWind","link":"<a href=\"http://thswind.github.io/2020/07/03/Methods-of-Selection-from-Genetic-Algorithm/\" title=\"Methods of Selection from Genetic Algorithm\">http://thswind.github.io/2020/07/03/Methods-of-Selection-from-Genetic-Algorithm/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1050 words in 7 min"}