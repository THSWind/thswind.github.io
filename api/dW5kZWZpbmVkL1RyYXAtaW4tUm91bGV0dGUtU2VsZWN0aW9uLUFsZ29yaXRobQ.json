{"title":"Trap in Roulette Selection","date":"2020-07-01T13:47:16.000Z","date_formatted":{"ll":"Jul 1, 2020","L":"07/01/2020","MM-DD":"07-01"},"link":"undefined/Trap-in-Roulette-Selection-Algorithm","comments":true,"tags":["ALG","RL"],"updated":"2020-07-01T13:47:16.000Z","content":"<p><a href=\"https://en.wikipedia.org/wiki/File:Fitness_proportionate_selection_example.png\" target=\"_blank\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Fitness_proportionate_selection_example.png/270px-Fitness_proportionate_selection_example.png\" alt=\"img\" loading=\"lazy\"></a></p>\n<p>Example of the selection of a single individual<strong>Fitness proportionate selection</strong>, also known as <strong>roulette wheel selection</strong>, is a genetic operator used in genetic algorithms for selecting potentially useful solutions for recombination.</p>\n<!--block-->\n<p>Recently, I found a trap in roulette algorithm while implementing this algorithm.</p>\n<h2 id=\"pseudo-for-roulette-selection\">Pseudo for Roulette Selection<a title=\"#pseudo-for-roulette-selection\" href=\"#pseudo-for-roulette-selection\"></a></h2>\n<p><img src=\"https://www.researchgate.net/publication/342921462/figure/tbl1/AS:913197359984641@1594734625593/The-pseudo-code-for-roulette-selection.png\" alt=\"The pseudo code for roulette selection\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"find-a-trap\">Find a Trap<a title=\"#find-a-trap\" href=\"#find-a-trap\"></a></h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Author: THSWind</span></span><br><span class=\"line\">sum_G = <span class=\"built_in\">sum</span>(<span class=\"built_in\">list</span>(itertools.islice(G_x, m_length-<span class=\"number\">10000</span>, m_length)))</span><br><span class=\"line\"></span><br><span class=\"line\">G_sample = [random.uniform(<span class=\"number\">0</span>,sum_G) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.batch_size)]</span><br><span class=\"line\">G_sample.sort()</span><br><span class=\"line\">mini_batch = []</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># ad: Sum of the first n items; </span></span><br><span class=\"line\"><span class=\"comment\"># num: index of G_x; count: index of batch size     </span></span><br><span class=\"line\">ad, count = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">num = m_length - <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(num &lt; m_length):</span><br><span class=\"line\">    ad += G_x[num]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ad &gt; G_sample[count]:</span><br><span class=\"line\">        mini_batch.append(self.memory[num])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &lt; self.batch_size -<span class=\"number\">1</span>:</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>: </span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>It seems  perfect, but something happened. After many steps, there is an error occurs,  it’s info shows that the index is out of bounds.</p>\n<p>I will describe the trap in an abstract way.</p>\n<h3 id=\"assume-the-elements-is-roulette-=-[4,-8,-0,-0,-0,-0,-0]\">Assume the elements is roulette = [4, 8, 0, 0, 0, 0, 0]<a title=\"#assume-the-elements-is-roulette-=-[4,-8,-0,-0,-0,-0,-0]\" href=\"#assume-the-elements-is-roulette-=-[4,-8,-0,-0,-0,-0,-0]\"></a></h3>\n<p><a><img src=\"https://i.loli.net/2020/07/30/WEPXlpNdvubm1O4.png\" ></a></p>\n<p><em>requirements:</em></p>\n<ol>\n<li>To select 3 elements (batch_size = 3)</li>\n<li>The elements on the roulette wheel are [4, 8, 0, 0, 0, 0, 0]</li>\n</ol>\n<p><em>Algorithm:</em></p>\n<p>&gt;&gt; Sum = sum([4, 8, 0, 0, 0, 0, 0])      # Sum = 12</p>\n<p>&gt;&gt; Sample = [random.uniform(0, Sum) for b in range(batch_size)]</p>\n<p>​     # Sample = [1, 6, 10]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ad, num, count = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(num &lt; roulette_length):</span><br><span class=\"line\">    ad += roulette[num]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ad &gt; Sample[count]:</span><br><span class=\"line\">        batch.append(roulette[num])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &lt; batch_size -<span class=\"number\">1</span>:</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>: </span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>After this, you’ll found len(batch) &lt; batch_size.</p>\n<p>My temporary solution:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(batch) &lt; batch_size:</span><br><span class=\"line\">    batch.extend([roulette[h] <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(batch_size-<span class=\"built_in\">len</span>(batch))])</span><br></pre></td></tr></table></figure>\n<h2 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h2>\n<p>The main reason for this trap is that the data is too sparse</p>\n<br/>\n","prev":{"title":"OpenAI/Gym Learning Notes","link":"undefined/OpenAI-Gym-Learning-Notes"},"next":{"title":"Some Tips and Errors in Python","link":"undefined/Some-Tips-and-Errors-in-Python"},"plink":"http://thswind.github.io/undefined/Trap-in-Roulette-Selection-Algorithm/","toc":[{"id":"pseudo-for-roulette-selection","title":"Pseudo for Roulette Selection","index":"1"},{"id":"find-a-trap","title":"Find a Trap","index":"2","children":[{"id":"assume-the-elements-is-roulette-=-[4,-8,-0,-0,-0,-0,-0]","title":"Assume the elements is roulette &#x3D; [4, 8, 0, 0, 0, 0, 0]","index":"2.1"}]},{"id":"summary","title":"Summary","index":"3"}],"reading_time":"369 words in 2 min"}